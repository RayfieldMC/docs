{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Wrapidly is a CLI-based Minecraft server launcher written in Java. It streamlines server management with modular features such as:</p> <ul> <li>Pre-startup health checks \u2014 verify environment before launch  </li> <li>Command remapping and macros \u2014 customize or automate console commands  </li> <li>Webhook alerts \u2014 Discord integration for real-time updates  </li> <li>Auto-restart on crash \u2014 keep your server running reliably  </li> <li>YAML-based configuration \u2014 flexible, toggleable options in <code>wrapper.yml</code> </li> </ul>"},{"location":"#why-wrapidly","title":"Why Wrapidly?","text":"<p>Running Minecraft servers manually can be messy. Wrapidly provides a lightweight wrapper that delivers:  </p> <ul> <li>Fewer startup errors  </li> <li>Smarter crash recovery  </li> <li>Easier customization  </li> <li>Built-in observability  </li> </ul>"},{"location":"#documentation-guide","title":"Documentation Guide","text":"<p>This documentation will walk you through:</p> <ol> <li>Setup \u2014 Installing and building Wrapidly  </li> <li>Configuration \u2014 Customizing with <code>wrapper.yml</code> </li> <li>Features \u2014 Using macros, remaps, webhooks, and more  </li> <li>Usage \u2014 Running the launcher and troubleshooting  </li> </ol>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Continue with the Setup Guide to get started.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#my-server-wont-launch","title":"My server won't launch","text":"<ul> <li>Make sure the JAR specified in <code>jvm:</code> exists</li> <li>Accept the Minecraft EULA by creating <code>eula.txt</code> with <code>eula=true</code></li> <li>Make sure port 25565 is free</li> </ul>"},{"location":"faq/#i-get-pre-startup-check-failed","title":"I get \"Pre-startup check failed\"","text":"<p>Set <code>requireHealthyStartup: false</code> to bypass checks (not recommended)</p>"},{"location":"faq/#can-i-use-this-with-pterodactyl","title":"Can I use this with Pterodactyl?","text":"<p>Yes, but Pterodactyl already handles some similar functionality. Wrapidly is more useful for local or lightweight setups.</p>"},{"location":"installation/","title":"Installation","text":"<ol> <li> <p>Download the latest release    Grab the newest version of Wrapidly from the Releases page.</p> </li> <li> <p>Place the JAR file    Move <code>Wrapidly.jar</code> into the root folder of your Minecraft server.</p> </li> <li> <p>Set the startup file    Configure your server startup to use:</p> </li> </ol> <pre><code>\njava -jar Wrapidly.jar\n\n</code></pre> <ol> <li>Start your server Launch the server as usual. Wrapidly will generate a <code>wrapper.yml</code> file in the root folder on first startup.</li> </ol>"},{"location":"config/jvm-field/","title":"JVM Field","text":"<p>The <code>jvm:</code> field defines how the Minecraft server is launched.</p> <p>Examples:</p> <pre><code>jvm: java -jar paper-1.21.1.jar\njvm: java -Xmx4G -Xms2G -jar forge-server.jar\n</code></pre> <p>Wrapidly uses the first <code>.jar</code> found in this string to check if the server file exists.</p>"},{"location":"config/wrapper-yml/","title":"Wrapper.yml","text":"<p>This is the core configuration file for Wrapidly. It defines everything from how to launch the server to how it behaves.</p> <p>Example:</p> <pre><code>jvm: java -Xmx2G -jar server.jar\nwebhook: \"\"\nremap:\n  stop: end\nmacros:\n  restartserver: |\n    say Restarting...\n    stop\nautoRestart: true\nrequireHealthyStartup: true\npreStart:\n  - echo Starting\n</code></pre>"},{"location":"features/autorestart/","title":"Auto-Restart","text":"<p>Set <code>autoRestart: true</code> to enable automatic restart when the server process exits with a non-zero exit code.</p> <pre><code>autoRestart: true\n</code></pre> <p>Use this feature with caution when debugging server crashes.</p>"},{"location":"features/command-remap/","title":"Command Remap","text":"<p>Wrapidly lets you remap console commands that you type during server runtime. This is useful for replacing, aliasing, or even blocking certain commands.</p>"},{"location":"features/command-remap/#example","title":"Example","text":"<pre><code>remap:\n  stop: end\n  restart: stop\n  crash: say This command is blocked.\n</code></pre>"},{"location":"features/command-remap/#how-it-works","title":"How it works","text":"<p>When you type a command into the Wrapidly console:</p> <ul> <li>Wrapidly checks if the exact command matches a key in the <code>remap:</code> block</li> <li>If it matches, the mapped value is sent to the Minecraft server instead</li> <li>If not, the original command is sent as-is</li> </ul> <p>So in the example above:</p> <ul> <li>Typing <code>stop</code> will actually send <code>end</code></li> <li>Typing <code>restart</code> will send <code>stop</code>, which then sends <code>end</code></li> <li>Typing <code>crash</code> will print a message instead of running a real server command</li> </ul> <p>You can chain remaps like <code>restart \u2192 stop \u2192 end</code>, but make sure you don't create infinite loops.</p>"},{"location":"features/command-remap/#notes","title":"Notes","text":"<ul> <li>Only one-level remapping is supported (Wrapidly does not resolve remaps recursively)</li> <li>Commands are matched exactly, so <code>say hi</code> won't match <code>say</code></li> </ul> <p>This feature is handy for blocking troll commands, replacing common typos, or adding shorthand to your server.</p>"},{"location":"features/macros/","title":"Macros","text":"<p>You can define multi-line command macros in <code>wrapper.yml</code>. These can be triggered using <code>!&lt;macro-name&gt;</code> in the console.</p> <pre><code>macros:\n  restartserver: |\n    say Restarting...\n    stop\n</code></pre> <p>Typing <code>!restartserver</code> will execute each command line in sequence.</p>"},{"location":"features/overview/","title":"Overview","text":"<p>Wrapidly enhances the Minecraft server startup process through:</p> <ul> <li>Validating your environment before launch</li> <li>Providing macro and remap support in the console</li> <li>Reporting via Discord webhooks</li> <li>Automatically restarting if a crash occurs</li> <li>Executing shell commands before startup</li> </ul> <p>All features can be toggled or extended via the <code>wrapper.yml</code> configuration file.</p>"},{"location":"features/prestart-commands/","title":"Pre-Start Commands","text":"<p>Run shell commands before starting the server using the <code>preStart:</code> list.</p> <pre><code>preStart:\n  - echo Backup started\n  - bash backup.sh\n</code></pre> <p>Each command is executed before launching the Minecraft server process.</p>"},{"location":"features/prestartup-check/","title":"Pre-Startup Check","text":"<p>Before starting the server, Wrapidly verifies:</p> <ul> <li>The specified server <code>.jar</code> file exists</li> <li><code>eula.txt</code> exists and is accepted (<code>eula=true</code>)</li> <li>At least one of the <code>plugins/</code> or <code>mods/</code> directories exists</li> <li>Port 25565 is available</li> </ul> <p>If any of these checks fail, and <code>requireHealthyStartup</code> is <code>true</code>, startup is canceled.</p>"},{"location":"features/webhook/","title":"Webhooks","text":"<p>Wrapidly supports Discord webhooks for status notifications.</p> <pre><code>webhook: \"https://discord.com/api/webhooks/...\"\n</code></pre> <p>It sends updates when: - The server starts (<code>Server starting...</code>) - The server stops (<code>Server stopped with code ...</code>) - Startup health check fails (optional)</p>"},{"location":"usage/running/","title":"Running the Launcher","text":"<p>Place <code>Wrapidly.jar</code> and your <code>wrapper.yml</code> in the same directory as your server.</p> <p>To launch:</p> <pre><code>java -jar Wrapidly.jar\n</code></pre> <p>Interact with the server console as usual. Use <code>!macroname</code> to trigger macros.</p>"},{"location":"usage/setup/","title":"Setup","text":"<p>Requirements:</p> <ul> <li>Java 17 or higher</li> <li>Gradle or the Gradle Wrapper (<code>./gradlew</code>)</li> </ul> <p>Clone and build:</p> <pre><code>git clone https://github.com/yourname/wrapidly.git\ncd wrapidly\n./gradlew clean build\n</code></pre> <p>Your compiled launcher will be in <code>build/libs/Wrapidly.jar</code>.</p>"}]}